// <auto-generated />
using System;
using Mc.Blog.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Mc.Blog.Data.Data.Migrations
{
    [DbContext(typeof(CtxDadosMsSql))]
    partial class CtxDadosMsSqlModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AI")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mc.Blog.Data.Data.Domains.Comentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("alterado_em");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("conteudo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("criado_em");

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("excluido");

                    b.Property<DateTime?>("ExcluidoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("excluido_em");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("id_post");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id")
                        .HasName("pk_comentarios");

                    b.HasIndex(new[] { "PostId" }, "idx_fk_comentarios_x_post");

                    b.HasIndex(new[] { "UsuarioId" }, "idx_fk_comentarios_x_usuario");

                    b.ToTable("comentarios", (string)null);
                });

            modelBuilder.Entity("Mc.Blog.Data.Data.Domains.Papel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("ativo");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_papeis");

                    b.ToTable("papeis", (string)null);
                });

            modelBuilder.Entity("Mc.Blog.Data.Data.Domains.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AlteradoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("alterado_em");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)")
                        .HasColumnName("conteudo");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("criado_em");

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("excluido");

                    b.Property<DateTime?>("ExcluidoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("excluido_em");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("titulo");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id")
                        .HasName("pk_posts");

                    b.HasIndex(new[] { "UsuarioId" }, "idx_fk_posts_x_usuario");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("Mc.Blog.Data.Data.Domains.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("access_failed_count");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("ativo");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2")
                        .HasColumnName("criado_em");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NomeCompleto")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome_completo");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(60)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(60)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_usuarios");

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("usuarios_direitos", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("usuarios_papeis", (string)null);
                });

            modelBuilder.Entity("Mc.Blog.Data.Data.Domains.Comentario", b =>
                {
                    b.HasOne("Mc.Blog.Data.Data.Domains.Post", "Post")
                        .WithMany("Comentarios")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_comentarios_x_post");

                    b.HasOne("Mc.Blog.Data.Data.Domains.Usuario", "Usuario")
                        .WithMany("Comentarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_comentarios_x_usuario");

                    b.Navigation("Post");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Mc.Blog.Data.Data.Domains.Post", b =>
                {
                    b.HasOne("Mc.Blog.Data.Data.Domains.Usuario", "Usuario")
                        .WithMany("Posts")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_posts_x_usuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Mc.Blog.Data.Data.Domains.Post", b =>
                {
                    b.Navigation("Comentarios");
                });

            modelBuilder.Entity("Mc.Blog.Data.Data.Domains.Usuario", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
